include ../mixins/containers.pug
include ../mixins/containers_aph.pug

- var imgAssets = '../assets/patterns_action/';
- var defaultBgr = 'backgrounds/ships.jpg';

+mchapter('Action Patterns', imgAssets+'chapter_patterns_action.svg')
+frameInbox('Data-Passing Components')
	.important-green
		ul
			li.fragment ~visual programming
			li.fragment thinks solely in terms of sending streams of data from one object to another
			li.fragment every component has a set of ports to which a data stream can be connected
			li.fragment requires a visual editor
			li.upside.fragment good for dynamic data processing (shaders, animations, AI decisions)
		.space-lg
		.flex-cols-2
			figure.fragment
				img.height-300(src=imgAssets+'unreal_blueprints.png')
				p Unreal Blueprints
			figure.fragment
				img.height-300(src=imgAssets+'unity_visual.jpg')
				p Unity Visual Scripting
+frameInbox('Example: Godot Editor (Cancelled in Godot 4)')
	.important-green
		.text-center
			img.height-750(src=imgAssets+'events_godot.jpg')
+frameInbox('Event System')
	.important-green
		ul
			li.fragment games are event-based
		.scope.fragment
			p What we need
			ul
				li.fragment event emitter (a library responsible for sending events)
				li.fragment a list of events that take place in the game
				li.fragment for each component, a list of events it can either send or react to
		.bottom-0.right-50.fragment
			img.height-460(src=imgAssets+'events_openttd.png')
		.bottom-0.left-50.fragment
			img.height-460(src=imgAssets+'events_lol.jpg')
+frameInbox('Processes and Actions')
	.important-orange
		ul
			li.fragment <span class="highlight">Process</span> - something that requires more than one frame to finish
				ul
					li.fragment basically everything that involves animations
		.space-md
		.scope.fragment
			p Example: Pacman
			div.center
				img.height-400(src=imgAssets+'action_pacman.svg')
			.left-700.bottom-100
				img.height-100(src=imgAssets+'fsm_pacman.png')
+frameInbox('Chain')
	.important-green
		ul
			li.fragment <span class="highlight">Chain</span> - a pattern that allows to execute a sequence of events/commands in a given order
			li.mt-20.fragment 
				p.highlight Implementation
				ul
					li.fragment <span class="highlight-2">callback chaining</span> - basically in every language, very bad robustness
					li.fragment <span class="highlight-2">iterator blocks</span> - C#
					li.fragment <span class="highlight-2">async/await </span> - JavaScript and C#
					li.fragment <span class="highlight-2">generators</span> - JavaScript
					li.fragment <span class="highlight-2">coroutines</span> - Kotlin, Ruby, Lua,...
		.bottom-0.right-0.fragment
			img.height-400(src=imgAssets+'chain_pokemon.gif')
		.bottom-40.left-40.fragment
			img.height-230(src=imgAssets+'chain.svg')
+frameInbox('Chain Example (C#)')
	div
		.code
			include ../../assets/patterns_action/snippets_generated/chain.html
+frameInbox('Chain Example (ECSLite library)')
	div.fill.center
		.code
			include ../../assets/patterns_action/snippets_generated/chain_ecslite.html
+frameInbox('Delayed invocation')
	.important-green
		ul
			li.fragment an action/event that should happen after a given amount of time
			li.fragment
				span.highlight always prefer an approach the engine recommends over features built into the scripting language
				ul
					li.fragment e.g. <span class="highlight-2 code">setTimeout()</span> in JavaScript is invoked from within the event loop, not during an update loop
			li.fragment example: Unity Delayed Invocation
				.code.text-sm.mt-20
					include ../../assets/patterns_action/snippets_generated/unity_delayed_invocation.html
+frameInbox('Delay Invocation Example (COLFIO library)')
	div.fill.center
		.code
			include ../../assets/patterns_action/snippets_generated/delay_ecslite.html
+frameInbox('Delay Invocation Example (KKD)')
	div.fill.center
		.code.text-sm
			include ../../assets/patterns_action/snippets_generated/delay_kkd.html
+frameInbox('Separation of concerns')
	.important-green
		ul.spacing-2xs
			li.fragment common misuse is to handle complex events in one place
			li.fragment solution: send events and delegate the processing to handlers
			li.downside.fragment in one place
				.code.text-2xs
					include ../../assets/patterns_action/snippets_generated/separation_wrong.html
			li.upside.fragment separated
				.code.text-2xs
					include ../../assets/patterns_action/snippets_generated/separation_good.html
+frameInbox('Antipattern: Quake death script')
	.flex-cols-2
		.code.text-2xs
			include ../../assets/patterns_action/snippets_generated/quake.html
		div
			img.height-700.mt-70.ml-80(src=imgAssets+'quake_logo.png')
+frameInbox('Responsibility ownership')
	.important-orange
		ul
			li.fragment(data-fragment-index="1") determines which component should be responsible for given scope/action/decision
			li.fragment(data-fragment-index="2") there is no bulletproof recipe, yet it should be unified within the game
			li.fragment(data-fragment-index="3") if the scope affects <span class="highlight">only one entity</span>, it should be a component attached to that entity
				ul
					li.fragment(data-fragment-index="4") <span class="highlight-2">example:</span> a worker that goes to the forest for some wood
			li.fragment(data-fragment-index="5") if the scope affects <span class="highlight">more entities</span>, it's should be implemented in systems (or in a component of parent nodes)
				ul
					li.fragment(data-fragment-index="6") <span class="highlight-2">example:</span> battle formation controller
		.flex-cols-2.mt-15
			figure.fragment(data-fragment-index="4")
				img.height-330(src=imgAssets+'ownership_cossacks3.jpg')
				p Individual units
			figure.fragment(data-fragment-index="6")
				img.height-330(src=imgAssets+'ownership_group_cossacks3.jpg')
				p Battle formation