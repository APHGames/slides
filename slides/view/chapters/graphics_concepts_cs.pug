include ../mixins/containers.pug
include ../mixins/containers_aph.pug

- var imgAssets = '../assets/graphics_concepts/';
- var defaultBgr = 'backgrounds/raytracing.jpg';

+mchapter('Rendering', imgAssets+'chapter_graphics.svg')
+frameInbox('Renderovací techniky')
	.important-orange
	figure.fragment.fade-up.top-20.left-0
		img.height-320(src=imgAssets+'conc_placement.jpg')
		p Sprite placement
	figure.fragment.fade-up.top-150.left-400
		img.height-320(src=imgAssets+'conc_raycasting.jpg')
		p Raycasting
	figure.fragment.fade-up.top-300.left-740
		img.height-320(src=imgAssets+'conc_rasterization.jpg')
		p Rasterizace
	figure.fragment.fade-up.top-400.right-0
		img.height-320(src=imgAssets+'conc_raytracing.jpg')
		p Raytracing
+frameInbox('Raycasting')
	.important-orange
		ul
			li.fragment(data-fragment-index='1') používal se v době, kdy hardwarové limity neumožňovaly 3D rendering
			li.fragment(data-fragment-index='2') vyšleme paprsek a vykreslíme čtyřúhelník, který protne
			li.fragment(data-fragment-index='3') rozlišujeme raycasting horizontální (závodní a bojové hry) a vertikální (FPS) 
		.text-center.mt-100.fragment(data-fragment-index='1')
			img.height-350(src=imgAssets+'rendering_raycasting.svg')
		.bottom-100.left-40.fragment(data-fragment-index='3')
			figure
				img.height-300(src=imgAssets+'raycasting_outrunners.gif')
				p 1992: Outrunners
		.bottom-100.right-40.fragment(data-fragment-index='3')
			figure
				img.height-300(src=imgAssets+'raycasting_wolf3d.gif')
				p 1992: Wolfenstein 3D
+frameInbox('Vrchol raycastingové éry')
	.center.fill
		.grid.grid-cols-3.grid-rows-1.gap-40.width-100p.mt
			+floppyAppBig(imgAssets+'raycasting_darkforces.jpg', 'SW: Dark Forces', '1995').fragment
			+floppyAppBig(imgAssets+'raycasting_duke.jpg', 'Duke Nukem 3D', '1996').fragment
			+floppyAppBig(imgAssets+'raycasting_sw.jpg', 'Shadow Warrior', '1997').fragment
+frameInbox('Raycasting')
	.important-orange
		ol
			li.fragment(data-fragment-index='1') vyšleme paprsek směrem od hráče
			li.fragment(data-fragment-index='2') paprsek krokujeme ve stejném směru
			li.fragment(data-fragment-index='3') pokud paprsek narazí do objektu, zpracujeme jej
		.space-lg
		.flex-cols-3
			figure.fragment(data-fragment-index='1')
				img.height-400(src=imgAssets+'raycasting_rays.svg')
				p Princip
			figure.fragment(data-fragment-index='2')
				img.height-400(src=imgAssets+'raycasting_sampling_borders.svg')
				p Přesné samplování
			figure.fragment(data-fragment-index='3')
				img.height-400(src=imgAssets+'raycasting_sampling_fixed.svg')
				p Fixní samplování
+frameInbox('Rasterizace')
	.important-orange
		ul
			li.fragment(data-fragment-index='1') zkonvertuje každý trojúhelník do pixelů na 2D obrazovce
			li.fragment(data-fragment-index='2') stíny jsou <span class="highlight">zapečené</span>, nebo dopočítané přes <span class="highlight">shadow mapy</span> nebo <span class="highlight">shadow volumes</span>
			li.fragment(data-fragment-index='3') světlo se počítá v shaderech
		.bottom-150.left-600.fragment(data-fragment-index='1')
			img.height-400(src=imgAssets+'rendering_rasterization.svg')
		.bottom-150.left-40.fragment(data-fragment-index='3')
			figure
				img.height-180(src=imgAssets+'lighting_vertex.png')
				p Vertex sh.
		.bottom-150.left-280.fragment(data-fragment-index='3')
			figure
				img.height-180(src=imgAssets+'lighting_fragment.png')
				p Fragment sh.
		.bottom-150.right-20.fragment(data-fragment-index='2')
			figure
				img.height-300(src=imgAssets+'shadow_maps.svg')
				p Shadow mapping
+frameInbox('Hry využívající rasterizaci')
	.center.fill
		.grid.grid-cols-3.grid-rows-1.gap-40.width-100p.mt
			+dsGameBig(imgAssets+'raster_gta5.jpg', 'Grand Theft Auto 5 (2013)').fragment
			+dsGameBig(imgAssets+'raycasting_witcher3.jpg', 'The Witcher 3: Wild Hunt (2015)').fragment
			+dsGameBig(imgAssets+'raycasting_rdr2.jpg', 'Read Dead Redemption 2 (2018)').fragment
+frameInbox('Raytracing')
	.important-orange
		ul
			li.fragment.fade-up(data-fragment-index='1') simuluje fyzikální vlastnosti světla
			li.fragment.fade-up(data-fragment-index='2') několik fází: ray-triangle test, BVH traversal, denoising
			li.fragment.fade-up(data-fragment-index='3') <span class="highlight">použití</span>: odlesky, stíny, globální osvětlovací model, "prasátka" (caustics)
			li.fragment.fade-up(data-fragment-index='4') světlo prochází scénou, odráží se od objektů, případně vniká do průhledných objektů (refrakce)
			li.fragment.fade-up(data-fragment-index='5') API: OptiX, DXR
		.text-center.fragment(data-fragment-index='1')
			img.height-400(src=imgAssets+'rendering_raytracing.svg')
		.bottom-50.left-40.fragment(data-fragment-index='3')
			img.height-230(src=imgAssets+'rtxon.jpg')
		.bottom-50.right-40.fragment(data-fragment-index='3')
			img.height-230(src=imgAssets+'rtxon1.jpg')
+frameInbox('Příklady raytracing her')
	.center.fill
		.grid.grid-cols-3.grid-rows-1.gap-40.width-100p.mt
			+dsGameBig(imgAssets+'raytracing_minecraft.jpg', 'Minecraft (2011)').fragment
			+dsGameBig(imgAssets+'raytracing_metro.jpg', 'Metro Exodus (2019)').fragment
			+dsGameBig(imgAssets+'raytracing_cyberpunk.jpg', 'Cyberpunk 2077 (2020)').fragment
+frameInbox('Pomocné techniky')
	.important-orange.spacing-2xs
		.scope.fragment(data-fragment-index='1')
			p LOD
			ul
				li.fragment(data-fragment-index='2') level of detail, urychluje vykreslení vzdálených objektů
				li.fragment(data-fragment-index='3') průkopnická hra - Spyro the Dragon na PSX
		.scope.fragment(data-fragment-index='4')
			p Texture mapping
			ul
				li.fragment(data-fragment-index='5') mapování 2D textury na 3D objekt
				li.fragment(data-fragment-index='6') hry z 90. let měly problémy s perspektivní korektností
				li.fragment(data-fragment-index='7') používá se tzv. UV mapování
		.scope.fragment(data-fragment-index='8')
			p Baking
			ul
				li.fragment(data-fragment-index='9') vykreslování do textury
				li.fragment(data-fragment-index='10') vygenerujeme texturu, která obsahuje i fyzikální vlastnosti objektu
				li.fragment(data-fragment-index='11') šetří výpočetní čas
		.top-50.right-40.fragment(data-fragment-index='1')
			img.height-300(src=imgAssets+'lod.png')
		.top-300.right-40.fragment(data-fragment-index='7')
			img.height-290(src=imgAssets+'uv_mapping.png')
		.top-350.right-450.fragment(data-fragment-index='6')
			img.height-200(src=imgAssets+'texture_mapping.svg')
		.bottom-10.right-40.fragment(data-fragment-index='8')
			img.height-170(src=imgAssets+'normal_map.png')
+frameInbox('Light baking')
	.important-orange
		ul
			li.fragment(data-fragment-index='1') technika na vytváření před-renderovaných statických světel
			li.fragment(data-fragment-index='2') používá se, když scéna obsahuje příliš mnoho světel
			li.fragment(data-fragment-index='3') funguje pouze pro statické scény
		.flex-cols-3.mt-100
			figure.fragment(data-fragment-index='1')
				img.height-400(src=imgAssets+'baking_tex.png')
				p Texturovaná scéna
			figure.fragment(data-fragment-index='2')
				img.height-400(src=imgAssets+'baking_light.png')
				p Zapečená světla
			figure.fragment(data-fragment-index='3')
				img.height-400(src=imgAssets+'baking_result.png')
				p Výsledek
+frameInbox('Filtrování textur')
	.important-green.spacing-3xs
		ul
			li.fragment je potřeba mapovat texely a pixely (skoro nikdy to není 1:1)
			li.fragment GPU sampluje několik texelů a složí výslednou barvu pro pixel
			.scope.fragment.mt-20
				p Mipmapping
				ul
					li.fragment pro každou texturu vytvoříme sekvenci bitmap s nižším rozlišením
					li.fragment objekty dále od kamery použijí textury s nižším rozlišením
				.top-180.right-20
					img.width-400(src=imgAssets+'mipmaps.svg')
				.bottom-0.right-20
					img.width-400(src=imgAssets+'giggly_effect.gif')
			.scope.fragment
				p Nejbližší soused
				ul
					li.fragment zvolí se nejbližší texel ke středu pixelu
			.scope.fragment
				p Bilineární filtrování
				ul
					li.fragment nasamplují se 4 texely okolo středu pixelu a výsledná barva bude váženým součtem jejich barev
			.scope.fragment
				p Trilineární filtrování
				ul
					li.fragment použije se bilineární filtrování přes mipmap úrovně
			.scope.fragment
				p Anisotropické filtrování
				ul
					li.fragment bere v potaz natočení kamery