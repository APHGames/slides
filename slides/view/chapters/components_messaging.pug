include ../mixins/containers.pug
include ../mixins/containers_aph.pug

- var imgAssets = '../assets/components_messaging/';
- var defaultBgr = 'backgrounds/wires.jpg';


+mchapter('Messaging', imgAssets+'chapter_components_messaging.svg')
+frameInbox('How components communicate')
	.important-orange.spacing-xs
		.scope.fragment
			p By modifying the container object's state
			ul
				li e.g. shared state machine
				li indirect communication
				li difficult to debug
		.scope.fragment
			p By direct calls
			ul
				li fast, but increases coupling
				li we need to know what to call
				li <span class="code">getComponentByName().sth()</span> way
		.scope.fragment
			p By using a message broker
			ul
				li events and commands
				li each component can declare interest in relevant messages
				li e.g. listening to ITEM_PICK event and playing a sound
		.top-160.right-150
			img.width-750(src=imgAssets+'messaging.svg')
+frameInbox('Message Broker')
	.important-red
		ul
			li.fragment components should be notified of any state change that is relevant
			li.fragment can be used for returning values (danger of <span class="highlight">feedback deadlock</span>)
			li.fragment a handler can be implemented inside components - <span class="highlight code">OnMessage()</span> function 
			li.fragment processing can be instant or delayed/scheduled
			li.fragment <span class="highlight">Event</span> - a message informing that something happened
			li.fragment <span class="highlight">Command</span> - a message instructing that something should happen
		.space-md
		.text-center
			img.height-300(src=imgAssets+'diag_message.svg')
+frameInbox('Message Types')
	.important-orange
		.scope.fragment
			p Unicast
			ul
				li a component sends a message to another component
				li in most cases, this can be handled by a direct call
				li example: pause the game
		.scope.fragment
			p Multicast
			ul
				li a) component sends a message to subscribers
				li b) component sends a message to all objects that meet specific criteria
				li example: notify all nearby units that the player has entered the area
				li example: the player stepped into a puddle - play a sound
		.scope.fragment
			p Broadcast
			ul
				li rarely used, usually for global messages
				li example: game over, debugging component
		.bottom-0.right-20
			img.height-680(src=imgAssets+'messaging_types.svg')
+frameInbox('Example: Unity Messages')
	.code.text-xs
		include ../../assets/components_messaging/snippets_generated/unity_messages.html
+frameInbox('Example: Unreal Message Bus')
	div
		ul
			li.fragment facilitates communication between application parts via <span class="highlight">Message Passing</span>
			li.fragment messages are classified into commands and events
			li.fragment all messages are wrapped into <span class="highlight code">IMessageContext</span>
		.space-xl
		.text-center
			img.height-300(src=imgAssets+'diag_message_unreal.svg')
+frameInbox('Message Broker Summary')
	.important-green
		ul
			li.upside.fragment facilitates event-based approach
			li.upside.fragment components can react on any message that goes into the event bus
			li.downside.fragment not intended for per-frame processing (less so for dynamics or related object movement)
			li.downside.fragment once established, it's not easy to revise the messaging architecture
			li.mt-40.fragment if there is something that should run every frame, it's better to use polling or direct call
		.bottom-0.right-60
			img.height-350(src=imgAssets+'boxes.png')