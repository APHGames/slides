include ../mixins/containers.pug
include ../mixins/containers_aph.pug

- var imgAssets = '../assets/physics_collisions/';
- var defaultBgr = 'backgrounds/hellblade.jpg';

+mchapter('Collision Detection', imgAssets+'chapter_collisions.svg')
+frameInbox('Collision Detection')
	.important-green.spacing-xs
		.scope.fragment
			p Steps
			ul
				li.fragment positions for the next frame are determined
				li.fragment a spatial data structure finds collision candidates
				li.fragment collision candidates are filtered out into a set of real collision pairs
				li.fragment collisions are resolved by the <span class="highlight-2">collision resolver</span>, by applying impulses or penalty forces
				li.fragment constraints are satisfied by the <span class="highlight-2">constraint resolver</span>
		.scope.fragment
			p Collidable entities
			ul
				li.fragment we need to provide a collision representation for each object
				li.fragment simple shapes are preferred (a car might be modelled as a rectangle)
				li.fragment more-complex shapes should only be used when the simple ones provide inadequate information to achieve the desired behavior
				li.mt-40.fragment if collidable entities don't overlap, no more testing is required
				li.fragment if they do overlap, more refined testing is required
		.tip.fragment.bottom-100.right-450
			img.height-600(src=globalAssets+'memes/camera_hide.png')
+frameInbox('Bounding Boxes')
	.important-orange.spacing-xs
		.scope.fragment
			p Sphere
			ul
				li.fragment center point and radius (4 numbers for 3D)
		.scope.fragment
			p Capsule
			ul
				li.fragment 2D: rectangle and two circles
				li.fragment 3D: cylinder and two hemispherical end-caps
				li.fragment representation: two points and radius
			.text-center
				img.height-120(src=imgAssets+'primitives_capsule.svg')
		.scope.fragment
			p AABB
			ul
				li.fragment axis-aligned bounding box
				li.fragment rectangular volume (cuboid) whose faces are parallel to the axes of the coordinate system
				li.upside.fragment very efficient test for penetration
				li.downside.fragment AABB must be recalculated whenever the object rotates
+frameInbox('Bounding Boxes')
	.important-orange.spacing-xs
		.scope.fragment
			p OBB
			ul
				li.fragment oriented bounding box
				li.fragment defined by a position and orientation
				li.fragment commonly used
			.top-50.right-140
				img.width-230(src=imgAssets+'primitives_obb.svg')
		.scope.fragment
			p k-DOP
			ul
				li.fragment discrete oriented polytope
				li.fragment more general case of AABB and OBB
				li.fragment approximates the shape of an object
			.top-380.right-140
				img.width-230(src=imgAssets+'primitives_kdop.svg')
		.scope.fragment
			p Compound shapes
			ul
				li.fragment more efficient alternative to a poly-soup
				li.fragment the system first tests bounding volumes of compound shapes
			.top-520.right-30
				img.height-150(src=imgAssets+'primitives_compound.svg')
		.scope.fragment
			p Convex hull
			ul
				li.fragment smallest convex volume containing the object
			.bottom-20.right-150
				img.height-150(src=imgAssets+'primitives_convexhull.svg')
+frameInbox('Comparison')
	.important-green
		.text-center
			img.height-760(src=imgAssets+'primitives_comparison.svg')
		.top-310.left-60
			img.width-1510(src=imgAssets+'primitives_comparison.png')
+frameInbox('Collisions in 2D games')
	.important-green
		ul
			li.fragment even side-scrollers need compound objects
			li.fragment simple AABB collision will not work for irregular sprites
		.space-xl
		.text-center
			img.height-450(src=imgAssets+'bad overlapping.png')
+frameInbox('Looking for collision candidates')
	.important-green.spacing-2xs
		.scope.fragment
			p Naive solution
			ul
				li.fragment each pair
				li.fragment
					include ../../assets/physics_collisions/equations_generated/collision_detection_01.svg
					|&nbsp;-> 10 objects result in 100 checks, 100 in 10 000 etc.
		.scope.fragment
			p Quad-tree
			ul
				li.fragment efficiency is 
					include ../../assets/physics_collisions/equations_generated/collision_detection_02.svg
					|, since the index takes about 
					include ../../assets/physics_collisions/equations_generated/collision_detection_03.svg
					|&nbsp;comparisons to traverse
				li.fragment good for point-like small objects
				li.fragment worst case: 
					include ../../assets/physics_collisions/equations_generated/collision_detection_04.svg
		.scope.fragment
			p Sweep and Prune
			ul
				li.fragment sorts the starts (lower bounds) and ends (upper bound) of bounding volumes of each solid along a number of axes
		.scope.fragment
			p BSP
			ul
				li.fragment binary space partitioning, good for complex static geometries (buildings)
		.scope.fragment
			p Grid, Oct-tree, R-tree, R+tree, R*tree, X-tree, M-tree,...
+frameInbox('Resolving collision candidates')
	.important-green
		.scope.fragment
			p Sphere-Sphere
			ul
				li.fragment
					include ../../assets/physics_collisions/equations_generated/resolving_candidates_01.svg
					|, where 
					include ../../assets/physics_collisions/equations_generated/resolving_candidates_02.svg
					|&nbsp;is a central point
		.scope.fragment
			p Sphere-ray
			ul
				li.fragment we just test the distance between a single sphere center and a ray
		.scope.fragment
			p AABB-AABB
			ul
				li.fragment test the borders
		.scope.fragment
			p AABB-Ray
			ul
				li.fragment intervals 
					include ../../assets/physics_collisions/equations_generated/resolving_candidates_03.svg
					|&nbsp;and 
					include ../../assets/physics_collisions/equations_generated/resolving_candidates_04.svg
					|&nbsp;mustn't overlap
			.bottom-120.right-140
				img.height-340(src=imgAssets+'aabb_ray.svg')
		.scope.fragment
			p OBB-OBB
			ul
				li.fragment axis-separating theorem by Gottschalk
+frameInbox('SAT')
	.important-orange
		.scope.fragment
			p SAT (separating axis theorem)
			ul
				li.fragment if an axis can be found along which the projection of two <br><span class="highlight-2">convex</span> shapes do not overlap, then the two shapes do not intersect
					.bottom-0.right-50
						img.height-600(src=imgAssets+'sat.svg')
				li.fragment for 2D: AABB 2 axes, OBB 4 axes
				li.fragment for 3D: AABB 3 axes, OBB 15 axes
				li.fragment AABB in 2D: only 2 axis to test		
					.bottom-20.left-40
						img.height-450(src=imgAssets+'sat_aabb.svg')
+frameInbox('Tunneling problem')
	.important-orange.spacing-2xs
		.scope.fragment
			p Substeps
			ul
				li.fragment time steps vary based on occurring situation
				li.fragment collision time is calculated by doing binary search in time, moving object back and forth by 1/2 steps (5 iterations is usually enough)
			.text-center
				img.height-200(src=imgAssets+'stepped_world.svg')
		.scope.fragment
			p Continuous Collision Detection (CCD)
			ul
				li.fragment uses <span class="highlight-2">Raycasting</span> or more advanced <span class="highlight-2">Swept Shapes</span> technique
				li.fragment Raycasting - the object emits a ray which is tested for intersection
				li.fragment Swept Shapes - a new shape is formed by the motion of the original one
			.text-center.mt-10
				img.height-130(src=imgAssets+'ccd.svg')
+frameInbox('Collision response')
	.important-green.spacing-3xs
		p.highlight-2.fragment How to respond to a collision?
		.scope.fragment
			p Explosion
			ul
				li.fragment adding energy to a system of rigid bodies
		.scope.fragment
			p Fracturing
			ul
				li.fragment breaking objects apart
		.scope.fragment
			p Restitution
			ul
				li.fragment amount of bounce an object has when it hits something
				li.fragment when two bodies collide, they compress slightly and then rebound, losing energy
		.scope.fragment
			p Friction
			ul
				li.fragment force that arises between two bodies that are in continuous contact, resisting their movement
				li.fragment removes energy from a system of rigid bodies
				li.fragment static, dynamic, rolling
		.scope.fragment
			p Constraint
			ul
				li.fragment taking constraints into consideration (e.g door can only rotate around the hinge)
		.top-40.right-40
			img.height-400(src=imgAssets+'tree.jpg')
+frameInbox('Collision Resolver')
	.important-green.spacing-3xs
		.scope.fragment
			p Relaxation
			ul
				li.highlight-2.fragment LCP - Linear Complementarity Problem
				li.fragment if one object moves, it will push another, and another, and another
				li.fragment very complex numeric algorithms
				li.fragment resolvers: PGS, Dantzig solver, Lemke method, Jacobi method
		.scope.fragment
			p Coming to rest
			ul
				li.fragment all objects lose energy, leading to eventual rest
				li.fragment not simple (floating-point error, inaccuracies, numerical instability)
					ul
						li.fragment
							span.highlight-2 sleep criteria
							ul
								li.fragment momentum or energy are below a threshold
						li.fragment
							span.highlight-2 simulation islands
							ul
								li.fragment grouping objects that either are interacting or have a potential to interact
		.top-120.right-20
			img.height-180(src=imgAssets+'physics_02.png')