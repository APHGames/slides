include ../mixins/containers.pug
include ../mixins/containers_aph.pug

- var imgAssets = '../assets/engines_input/';
- var defaultBgr = 'backgrounds/keyboard.jpg';

// ===================================================== SLIDES =====================================================
+mchapter('Input', imgAssets+'chapter_engines_input.svg')
+frameInbox('Input Manager')
	.important-green
		.flex.flex-row.flex-no-wrap
			div.spacing-xs
				ul
					li.fragment detects events from input devices
					li.fragment <span class="highlight">polling</span> - compare against the previous state
					li.fragment <span class="highlight">callbacks</span> - handled by an upper SW layer
				.scope.fragment
					p Devices
					.right-100.top-250
						img.height-570(src=globalAssets+'memes/keyboard_games.jpg')
					ul
						li.fragment keyboard, mouse, gamepad,...
						li.fragment one-axis controller - single analog state
						li.fragment two-axis controller - mouse and joystick
						li.fragment three-axis controller - g-senzor
						li.fragment four-axis controller - simulation joystick
				.scope.fragment
					p What to consider
					ul
						li.fragment which input is active (e.g., pressed key)
						li.fragment for how long has been active
						li.fragment which input combination is active
						li.fragment how to map an input to an action in the game
+frameInbox('Input Events')
	.important-green
		.flex-cols-2
			div
				.scope.fragment(data-fragment-index="1")
					p Atomic events
					ul
						li key press (keydown)
						li key release (keyup)
						li mouse movement (mouseover)
				.scope.fragment(data-fragment-index="2")
					p Compound events
					ul
						li click
						li fling
						li pinch to zoom
						li double tap
				.scope.fragment(data-fragment-index="3")
					p Complex events
					ul
						li sequences
						li chords
			div
				.right-170.top-200.fragment(data-fragment-index="1")
					img.height-150(src=imgAssets+'input_joypad.png')
				.right-270.top-350.mt-80.fragment(data-fragment-index="2")
					img.height-150(src=imgAssets+'input_pinch.png')
				.right-270.top-600.mt-80.fragment(data-fragment-index="3")
					img.height-200(src=imgAssets+'input_cheat.png')
+frameInbox('Complex events and mapping')
		div.width-85p.important-green
			.scope
				p.fragment Sequence
				ul
					li.fragment e.g., cheats: IDDQD, IDKFA
						.right-30.top-30
							img.width-450(src=globalAssets+'memes/cheatcodes.jpg')
			.scope
				p.fragment Chords
				ul
					li.fragment in combat games
						.right-50.top-420
							img.width-550(src=imgAssets+'street_fighter.jpg')
			.space-md
			.scope.fragment
				p Mapping
				ul
					li.fragment relationship between an event and an action in the game
					li.fragment dependent on the context, e.g., if the player<br>drives a car, or walks on foot
						.right-400.top-600
							img.width-550(src=globalAssets+'memes/walk.jpg')
				
+frameInbox('Example: Godot Input Manager')
	.flex-cols-2
		.code.text-sm
			include ../../assets/engines_input/snippets_generated/input_godot.html
