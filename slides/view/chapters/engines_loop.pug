include ../mixins/containers.pug
include ../mixins/containers_aph.pug

- var imgAssets = '../assets/engines_loop/';
- var defaultBgr = 'backgrounds/pzprototype.jpg';

// ===================================================== SLIDES =====================================================
+mchapter('Game Loop', imgAssets+'chapter_engines_loop.svg')
+frameInbox('Game Loop')
	.important-orange
		ul
			li.fragment the most important part of the game engine
			li.fragment each turn advances the state of the game
			li.fragment usually coordinated with the event loop of the platform/virtual machine
			li.fragment optimal time step for rendering: 
				span.highlight.font-bold 60 FPS = 16.6 ms per frame
			li.fragment audio, input, and physics require more frequent updates
		.space-2xl
		.text-center.center.fragment
			.width-55p.highlight.font-bold In general, a program spends 90% of its time in 10% of its code. The game loop will be firmly in those 10%.
+frameInbox('Simple Game Loop')
	.important-orange.center.fill
		img.height-750(src=imgAssets+'loop_simple.svg')
+frameInbox('Game loop with separated rendering')
	.important-orange.center.fill
		img.height-750(src=imgAssets+'loop_multithreaded.svg')
+frameInbox('Cooperative game loop')
	.important-orange
		ul
			li.fragment synchronization can be provided by delayed invocation
			li.fragment first used in <span class="highlight">Ultima VII (1994)</span>
		.bottom-20.left-170
			img.height-680(src=imgAssets+'loop_cooperative.svg')
+frameInbox('Update method')
	.important-red
		.scope.fragment 
			p Fixed time step
			ul
				li.fragment each update advances the game by a certain amount of time
				li.upside.fragment deterministic and stable
				li.downside.fragment the game may slow down
		.scope.fragment
			p Variable time step
			ul
				li.fragment each update advances the game based on how much real time has passed since the last frame
				li.upside.fragment natural
				li.downside.fragment non-deterministic and unstable
		.scope.fragment
			p Adaptive time step
			ul
				li.fragment switches between variable and fixed time step based on thresholds
				li.fragment deals with long breaks better than the other two
		+tipKeen("Some old games were tied with the system clock, hence their CPU-sensitivity.")(class='bottom-0 right-300')
+frameInbox('Example: Unity Game Loop')
	.center
		img.height-800(src=imgAssets+'loop_unity.svg')
+frameInbox('Update Inconsistencies')
	.important-orange
		ul
			li.fragment game objects are consistent before and after every update
			li.fragment they may get to an inconsistent state during the update - <span class="highlight">one-frame-off lag</span>
			li.fragment possible solutions: bucket update, script execution order (Unity), process priority (Godot)
		.center.fragment
			figure.mt-40
				img.width-1000(src=imgAssets+'update_inconsistencies.svg')
				p Object A reads previous state of Object B and Object B reads previous state of Object C