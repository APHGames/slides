include ../mixins/containers.pug
include ../mixins/containers_aph.pug

- var imgAssets = '../assets/graphics_processing/';
- var defaultBgr = 'backgrounds/gpu.jpg';

+mchapter('GPU processing', imgAssets+'chapter_gpu.svg')
+frameInbox('History of PC GPU')
	div
		.bottom-20.right-40
			img.height-800(src=imgAssets+'history.svg')
		.bottom-20.right-60
			img.height-800(src=imgAssets+'history.png')
+frameInbox('History of PC GPU')
	div
		ul.spacing-md
			li.fragment(data-fragment-index='1') <span class="highlight">1981</span> - <span class="highlight-2">IBM MDA</span>, Monochrome Display Adapter
			li.fragment(data-fragment-index='2') <span class="highlight">1982</span> - <span class="highlight-2">IBM CGA</span>, Color Graphics Adapter, 4/16 colors
			li.fragment(data-fragment-index='3') <span class="highlight">1984</span> - <span class="highlight-2">IBM EGA</span>, Enhanced Graphics Adapter, 16/64 colors
			li.fragment(data-fragment-index='4') <span class="highlight">1987</span> - <span class="highlight-2">VGA</span> - Video Graphics Array, 256 colors
			li.fragment(data-fragment-index='5') <span class="highlight">1994</span> - <span class="highlight-2">S3 Trio64</span> - golden era of DOS games
			li.fragment(data-fragment-index='6') <span class="highlight">1996</span> - <span class="highlight-2">3dfx Voodoo</span> - rise of 3D acceleration
			li.fragment(data-fragment-index='7') <span class="highlight">1999</span> - <span class="highlight-2">Geforce 256</span> - rendering pipeline
			li.fragment(data-fragment-index='8') <span class="highlight">2003</span> - <span class="highlight-2">Geforce 3</span> - rise of shaders
			li.fragment(data-fragment-index='9') <span class="highlight">2006</span> - <span class="highlight-2">Geforce 8</span> - SM architecture, CUDA
			li.fragment(data-fragment-index='10') <span class="highlight">2016</span> - <span class="highlight-2">Oculus Rift</span> - rise of VR headsets
			li.fragment(data-fragment-index='11') <span class="highlight">2018</span> - <span class="highlight-2">Geforce 10</span> - Tensor cores and Raytracing
		.top-0.right-50.fragment(data-fragment-index='2')
			img.height-250(src=imgAssets+'history_cga.png')
		.top-180.right-150.fragment(data-fragment-index='3')
			img.height-250(src=imgAssets+'history_ega.png')
		.top-300.right-400.fragment(data-fragment-index='4')
			img.height-250(src=imgAssets+'history_vga.png')
		.top-400.right-30.fragment(data-fragment-index='5')
			img.height-250(src=imgAssets+'history_svga.jpg')
		.top-500.right-380.fragment(data-fragment-index='6')
			img.height-250(src=imgAssets+'history_glquake.jpg')
		.top-650.right-40.fragment(data-fragment-index='11')
			img.height-250(src=imgAssets+'history_turing.jpg')
		.tip.fragment.bottom-140.right-300(data-fragment-index='12')
			img.height-550(src=imgAssets+'meme_4090.png')
+frameInbox('Graphics API')
	div.spacing-3xs
		.scope.fragment
			p DirectX
			ul
				li.fragment since 1995
				li.fragment widely used for Windows and Xbox games
				li.fragment current version - DirectX 12 Ultimate
			.top-80.right-60
				img.width-300(src=imgAssets+'logo_directx.png')
		.scope.fragment
			p OpenGL
			ul
				li.fragment since 1992
				li.fragment concept of state machine
				li.fragment cross-platform
				li.fragment OpenGL ES - main graphics library for Android, iOS
			.top-460.right-60
				img.width-300(src=imgAssets+'logo_opengl.png')
		.scope.fragment
			p Vulkan
			ul
				li.fragment since 2015
				li.fragment referred as the next generation of OpenGL
				li.fragment lower overhead, more direct control over the GPU than OpenGL
			.top-760.right-60
				img.width-300(src=imgAssets+'logo_vulkan.png')
+frameInbox('Rendering pipeline')
	.important-green
		ul.fragment.spacing-xs
			li.fragment <span class="highlight">Vertex Fetch</span>: driver inserts the command in a GPU-readable encoding inside a pushbuffer
			li.fragment <span class="highlight">Poly Morph Engine</span> of SM fetches the vertex data
			li.fragment Warps of 32 threads are scheduled inside the SM
			li.fragment Vertex shaders in the warp are executed
			li.fragment H/D/G shaders are executed (optional step)
			li.fragment <span class="highlight">Raster engine</span> generates the pixel information
			li.fragment data is sent to <span class="highlight">ROP</span> (Render Output Unit)
			li.fragment ROP performs depth-testing, blending, antialiasing etc.
			.text-center.mt-20
				img.height-320(src=imgAssets+'gpu_process.svg')
+frameInbox('Rendering pipeline')
	.center.fill
		img.height-250(src=imgAssets+'pipeline_example.svg')
+frameInbox('Shaders')
	.important-orange.spacing-xs
		ul
			li.fragment programs that run on the video card in order to perform a variety of specialized functions (lighting, effects, post-processing, physics, AI)
		.scope.fragment
			p Vertex shader
			ul
				li.fragment input is vertex, output is transformed vertex
		.scope.fragment
			p Geometry shader (optional)
			ul
				li.fragment input is n-vertex primitive, output is zero or more primitives
		.scope.fragment
			p Tessellation shader (optional)
			ul
				li.fragment input is primitive, output is subdivided primitive
		.scope.fragment
			p Pixel (fragment) shader
			ul
				li.fragment input is fragment, output is color, depth value, stencil value
				li.fragment widely used for visual effects
			.bottom-50.right-50
				figure
					img.height-500(src=imgAssets+'asciident.jpg')
					p ASCIIdent
		.scope.fragment
			p Compute shader
			ul
				li.fragment shader that runs outside of the rendering pipeline (e.g. CUDA)
+frameInbox('Shader applications')
	div.spacing-4xs
		.scope.fragment
			p Vertex shader
			ul
				li.fragment 3D-to-2D transformation
				li.fragment displacement mapping
				li.fragment skinning
		.scope.fragment
			p Tessellation shader
			ul
				li.fragment Hull Shader - tessellation control
				li.fragment Domain Shader - tessellation evaluation
			.top-40.right-40
				figure
					img.height-200(src=imgAssets+'tessellation.jpg')
					p Surface Tessellation
		.scope.fragment
			p Geometry shader
			ul
				li.fragment sprite-from-point transformation
				li.fragment cloth simulation
			.top-300.right-40
				figure
					img.height-250(src=imgAssets+'geom_shader.gif')
					p Geometry shader grass
		.scope.fragment
			p Pixel (fragment) shader
			ul
				li.fragment bump mapping
				li.fragment particle systems
				li.fragment visual effects
			.bottom-0.right-40
				figure
					img.height-250(src=imgAssets+'screen_shader.gif')
					p Screen Effect
+frameInbox('Example: Geometry shader')
	div
		.code.text-2xs
			include ../../assets/graphics_processing/snippets_generated/geom.html
	.top-40.right-40
		img.height-300(src=imgAssets+'geom_shader.svg')